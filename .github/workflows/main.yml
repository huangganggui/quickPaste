name: 'publish'

on:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        settings:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-20.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: '--verbose'

    runs-on: ${{ matrix.settings.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.settings.platform == 'ubuntu-20.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm' # Set this to npm, yarn or pnpm.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.settings.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install # change this to npm or pnpm depending on which one you use.

      # - name: install @tauri-apps/cli-win32-x64-msvc(windows only)
      #   if: matrix.settings.platform == 'windows-latest' # This must match the platform value defined above.
      #   run: npm install @tauri-apps/cli-win32-x64-msvc @rollup/rollup-win32-x64-msvc

      # sign config
      - name: import windows certificate
        if: matrix.settings.platform == 'windows-latest'
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
          certutil -decode certificate/tempCert.txt certificate/certificate.pfx
          Remove-Item -path certificate -include tempCert.txt
          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)

      # build
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.settings.args }}
      
      # sign
      - name: sign
        if: matrix.settings.platform == 'windows-latest'
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          C:\"Program Files (x86)"\"Windows Kits"\10\bin\10.0.22621.0\x64\signtool.exe sign /debug /f certificate/certificate.pfx /p $env:WINDOWS_CERTIFICATE_PASSWORD /fd SHA256 .\src-tauri\target\release\*.exe

      # upload
      - name: "Uploading file"
        if: matrix.settings.platform == 'macos-latest' && matrix.settings.args == '--target aarch64-apple-darwin'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.settings.platform }}_aarch64
          path: |
            ./src-tauri/target/aarch64-apple-darwin/release/bundle/dmg
            ./src-tauri/target/aarch64-apple-darwin/release/bundle/macos
          overwrite: true
      - name: "Uploading file"
        if: matrix.settings.platform == 'macos-latest' && matrix.settings.args == '--target x86_64-apple-darwin'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.settings.platform }}_x86_64
          path: |
            ./src-tauri/target/x86_64-apple-darwin/release/bundle/dmg
            ./src-tauri/target/x86_64-apple-darwin/release/bundle/macos
          overwrite: true
      - name: "Uploading file"
        if: matrix.settings.platform == 'ubuntu-20.04'
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu
          path: |
            ./src-tauri/target/release/bundle/appimage
            ./src-tauri/target/release/bundle/deb
          overwrite: true
      - name: "Uploading file"
        if: matrix.settings.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            .\src-tauri\target\release\bundle\nsis
            .\src-tauri\target\release\bundle\msi
            .\src-tauri\target\release\*.exe
          overwrite: true

      - name: List Files
        run: ls -R
